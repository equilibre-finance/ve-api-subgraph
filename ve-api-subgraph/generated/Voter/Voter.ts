// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Abstained extends ethereum.Event {
  get params(): Abstained__Params {
    return new Abstained__Params(this);
  }
}

export class Abstained__Params {
  _event: Abstained;

  constructor(event: Abstained) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalWeight(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DistributeReward extends ethereum.Event {
  get params(): DistributeReward__Params {
    return new DistributeReward__Params(this);
  }
}

export class DistributeReward__Params {
  _event: DistributeReward;

  constructor(event: DistributeReward) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gauge(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GaugeCreated extends ethereum.Event {
  get params(): GaugeCreated__Params {
    return new GaugeCreated__Params(this);
  }
}

export class GaugeCreated__Params {
  _event: GaugeCreated;

  constructor(event: GaugeCreated) {
    this._event = event;
  }

  get poolFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get votingRewardsFactory(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get gaugeFactory(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get bribeVotingReward(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get feeVotingReward(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get gauge(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class GaugeKilled extends ethereum.Event {
  get params(): GaugeKilled__Params {
    return new GaugeKilled__Params(this);
  }
}

export class GaugeKilled__Params {
  _event: GaugeKilled;

  constructor(event: GaugeKilled) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GaugeRevived extends ethereum.Event {
  get params(): GaugeRevived__Params {
    return new GaugeRevived__Params(this);
  }
}

export class GaugeRevived__Params {
  _event: GaugeRevived;

  constructor(event: GaugeRevived) {
    this._event = event;
  }

  get gauge(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NotifyReward extends ethereum.Event {
  get params(): NotifyReward__Params {
    return new NotifyReward__Params(this);
  }
}

export class NotifyReward__Params {
  _event: NotifyReward;

  constructor(event: NotifyReward) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalWeight(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class WhitelistNFT extends ethereum.Event {
  get params(): WhitelistNFT__Params {
    return new WhitelistNFT__Params(this);
  }
}

export class WhitelistNFT__Params {
  _event: WhitelistNFT;

  constructor(event: WhitelistNFT) {
    this._event = event;
  }

  get whitelister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bool(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class WhitelistToken extends ethereum.Event {
  get params(): WhitelistToken__Params {
    return new WhitelistToken__Params(this);
  }
}

export class WhitelistToken__Params {
  _event: WhitelistToken;

  constructor(event: WhitelistToken) {
    this._event = event;
  }

  get whitelister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _bool(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Voter extends ethereum.SmartContract {
  static bind(address: Address): Voter {
    return new Voter("Voter", address);
  }

  ClPoolType(): i32 {
    let result = super.call("ClPoolType", "ClPoolType():(uint8)", []);

    return result[0].toI32();
  }

  try_ClPoolType(): ethereum.CallResult<i32> {
    let result = super.tryCall("ClPoolType", "ClPoolType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  CurvePoolType(): i32 {
    let result = super.call("CurvePoolType", "CurvePoolType():(uint8)", []);

    return result[0].toI32();
  }

  try_CurvePoolType(): ethereum.CallResult<i32> {
    let result = super.tryCall("CurvePoolType", "CurvePoolType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  clPoolFactory(): Address {
    let result = super.call("clPoolFactory", "clPoolFactory():(address)", []);

    return result[0].toAddress();
  }

  try_clPoolFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "clPoolFactory",
      "clPoolFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimable(param0: Address): BigInt {
    let result = super.call("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_claimable(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimable", "claimable(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createClGauge(_pool: Address): Address {
    let result = super.call(
      "createClGauge",
      "createClGauge(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toAddress();
  }

  try_createClGauge(_pool: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createClGauge",
      "createClGauge(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createCurveGauge(_pool: Address): Address {
    let result = super.call(
      "createCurveGauge",
      "createCurveGauge(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toAddress();
  }

  try_createCurveGauge(_pool: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createCurveGauge",
      "createCurveGauge(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  emergencyCouncil(): Address {
    let result = super.call(
      "emergencyCouncil",
      "emergencyCouncil():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_emergencyCouncil(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "emergencyCouncil",
      "emergencyCouncil():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epochGovernor(): Address {
    let result = super.call("epochGovernor", "epochGovernor():(address)", []);

    return result[0].toAddress();
  }

  try_epochGovernor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "epochGovernor",
      "epochGovernor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epochNext(_timestamp: BigInt): BigInt {
    let result = super.call("epochNext", "epochNext(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_epochNext(_timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochNext", "epochNext(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_timestamp)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochStart(_timestamp: BigInt): BigInt {
    let result = super.call("epochStart", "epochStart(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_epochStart(_timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochStart", "epochStart(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_timestamp)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochVoteEnd(_timestamp: BigInt): BigInt {
    let result = super.call("epochVoteEnd", "epochVoteEnd(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_epochVoteEnd(_timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochVoteEnd",
      "epochVoteEnd(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochVoteStart(_timestamp: BigInt): BigInt {
    let result = super.call(
      "epochVoteStart",
      "epochVoteStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    );

    return result[0].toBigInt();
  }

  try_epochVoteStart(_timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochVoteStart",
      "epochVoteStart(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factoryRegistry(): Address {
    let result = super.call(
      "factoryRegistry",
      "factoryRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_factoryRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "factoryRegistry",
      "factoryRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeCollector(): Address {
    let result = super.call("feeCollector", "feeCollector():(address)", []);

    return result[0].toAddress();
  }

  try_feeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeCollector", "feeCollector():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  forwarder(): Address {
    let result = super.call("forwarder", "forwarder():(address)", []);

    return result[0].toAddress();
  }

  try_forwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall("forwarder", "forwarder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gaugeToBribe(param0: Address): Address {
    let result = super.call("gaugeToBribe", "gaugeToBribe(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_gaugeToBribe(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gaugeToBribe",
      "gaugeToBribe(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gaugeToFees(param0: Address): Address {
    let result = super.call("gaugeToFees", "gaugeToFees(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_gaugeToFees(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "gaugeToFees",
      "gaugeToFees(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gaugeType(param0: Address): i32 {
    let result = super.call("gaugeType", "gaugeType(address):(uint8)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toI32();
  }

  try_gaugeType(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("gaugeType", "gaugeType(address):(uint8)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gauges(param0: Address): Address {
    let result = super.call("gauges", "gauges(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_gauges(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("gauges", "gauges(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governor(): Address {
    let result = super.call("governor", "governor():(address)", []);

    return result[0].toAddress();
  }

  try_governor(): ethereum.CallResult<Address> {
    let result = super.tryCall("governor", "governor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAlive(param0: Address): boolean {
    let result = super.call("isAlive", "isAlive(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAlive(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAlive", "isAlive(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGauge(param0: Address): boolean {
    let result = super.call("isGauge", "isGauge(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isGauge(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isGauge", "isGauge(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistedNFT(param0: BigInt): boolean {
    let result = super.call(
      "isWhitelistedNFT",
      "isWhitelistedNFT(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isWhitelistedNFT(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistedNFT",
      "isWhitelistedNFT(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistedToken(param0: Address): boolean {
    let result = super.call(
      "isWhitelistedToken",
      "isWhitelistedToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isWhitelistedToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistedToken",
      "isWhitelistedToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastVoted(param0: BigInt): BigInt {
    let result = super.call("lastVoted", "lastVoted(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastVoted(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastVoted", "lastVoted(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  length(): BigInt {
    let result = super.call("length", "length():(uint256)", []);

    return result[0].toBigInt();
  }

  try_length(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("length", "length():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxVotingNum(): BigInt {
    let result = super.call("maxVotingNum", "maxVotingNum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxVotingNum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxVotingNum", "maxVotingNum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minter(): Address {
    let result = super.call("minter", "minter():(address)", []);

    return result[0].toAddress();
  }

  try_minter(): ethereum.CallResult<Address> {
    let result = super.tryCall("minter", "minter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolForGauge(param0: Address): Address {
    let result = super.call("poolForGauge", "poolForGauge(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_poolForGauge(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolForGauge",
      "poolForGauge(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolVote(param0: BigInt, param1: BigInt): Address {
    let result = super.call("poolVote", "poolVote(uint256,uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_poolVote(param0: BigInt, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolVote",
      "poolVote(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pools(param0: BigInt): Address {
    let result = super.call("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_pools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalWeight(): BigInt {
    let result = super.call("totalWeight", "totalWeight():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeight", "totalWeight():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usedWeights(param0: BigInt): BigInt {
    let result = super.call("usedWeights", "usedWeights(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_usedWeights(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usedWeights",
      "usedWeights(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  v1Factory(): Address {
    let result = super.call("v1Factory", "v1Factory():(address)", []);

    return result[0].toAddress();
  }

  try_v1Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("v1Factory", "v1Factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ve(): Address {
    let result = super.call("ve", "ve():(address)", []);

    return result[0].toAddress();
  }

  try_ve(): ethereum.CallResult<Address> {
    let result = super.tryCall("ve", "ve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votes(param0: BigInt, param1: Address): BigInt {
    let result = super.call("votes", "votes(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_votes(param0: BigInt, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votes", "votes(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weights(param0: Address): BigInt {
    let result = super.call("weights", "weights(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_weights(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("weights", "weights(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class __VaraForwarder_initCall extends ethereum.Call {
  get inputs(): __VaraForwarder_initCall__Inputs {
    return new __VaraForwarder_initCall__Inputs(this);
  }

  get outputs(): __VaraForwarder_initCall__Outputs {
    return new __VaraForwarder_initCall__Outputs(this);
  }
}

export class __VaraForwarder_initCall__Inputs {
  _call: __VaraForwarder_initCall;

  constructor(call: __VaraForwarder_initCall) {
    this._call = call;
  }

  get trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class __VaraForwarder_initCall__Outputs {
  _call: __VaraForwarder_initCall;

  constructor(call: __VaraForwarder_initCall) {
    this._call = call;
  }
}

export class ClaimBribesCall extends ethereum.Call {
  get inputs(): ClaimBribesCall__Inputs {
    return new ClaimBribesCall__Inputs(this);
  }

  get outputs(): ClaimBribesCall__Outputs {
    return new ClaimBribesCall__Outputs(this);
  }
}

export class ClaimBribesCall__Inputs {
  _call: ClaimBribesCall;

  constructor(call: ClaimBribesCall) {
    this._call = call;
  }

  get _bribes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimBribesCall__Outputs {
  _call: ClaimBribesCall;

  constructor(call: ClaimBribesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get _fees(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokens(): Array<Array<Address>> {
    return this._call.inputValues[1].value.toAddressMatrix();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get _gauges(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class CreateClGaugeCall extends ethereum.Call {
  get inputs(): CreateClGaugeCall__Inputs {
    return new CreateClGaugeCall__Inputs(this);
  }

  get outputs(): CreateClGaugeCall__Outputs {
    return new CreateClGaugeCall__Outputs(this);
  }
}

export class CreateClGaugeCall__Inputs {
  _call: CreateClGaugeCall;

  constructor(call: CreateClGaugeCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateClGaugeCall__Outputs {
  _call: CreateClGaugeCall;

  constructor(call: CreateClGaugeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateCurveGaugeCall extends ethereum.Call {
  get inputs(): CreateCurveGaugeCall__Inputs {
    return new CreateCurveGaugeCall__Inputs(this);
  }

  get outputs(): CreateCurveGaugeCall__Outputs {
    return new CreateCurveGaugeCall__Outputs(this);
  }
}

export class CreateCurveGaugeCall__Inputs {
  _call: CreateCurveGaugeCall;

  constructor(call: CreateCurveGaugeCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateCurveGaugeCall__Outputs {
  _call: CreateCurveGaugeCall;

  constructor(call: CreateCurveGaugeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DepositManagedCall extends ethereum.Call {
  get inputs(): DepositManagedCall__Inputs {
    return new DepositManagedCall__Inputs(this);
  }

  get outputs(): DepositManagedCall__Outputs {
    return new DepositManagedCall__Outputs(this);
  }
}

export class DepositManagedCall__Inputs {
  _call: DepositManagedCall;

  constructor(call: DepositManagedCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _mTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositManagedCall__Outputs {
  _call: DepositManagedCall;

  constructor(call: DepositManagedCall) {
    this._call = call;
  }
}

export class DistributeCall extends ethereum.Call {
  get inputs(): DistributeCall__Inputs {
    return new DistributeCall__Inputs(this);
  }

  get outputs(): DistributeCall__Outputs {
    return new DistributeCall__Outputs(this);
  }
}

export class DistributeCall__Inputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }

  get _gauges(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DistributeCall__Outputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }
}

export class Distribute1Call extends ethereum.Call {
  get inputs(): Distribute1Call__Inputs {
    return new Distribute1Call__Inputs(this);
  }

  get outputs(): Distribute1Call__Outputs {
    return new Distribute1Call__Outputs(this);
  }
}

export class Distribute1Call__Inputs {
  _call: Distribute1Call;

  constructor(call: Distribute1Call) {
    this._call = call;
  }

  get _start(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _finish(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Distribute1Call__Outputs {
  _call: Distribute1Call;

  constructor(call: Distribute1Call) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _factoryRegistry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _v1Factory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _clPoolFactory(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class KillGaugeCall extends ethereum.Call {
  get inputs(): KillGaugeCall__Inputs {
    return new KillGaugeCall__Inputs(this);
  }

  get outputs(): KillGaugeCall__Outputs {
    return new KillGaugeCall__Outputs(this);
  }
}

export class KillGaugeCall__Inputs {
  _call: KillGaugeCall;

  constructor(call: KillGaugeCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class KillGaugeCall__Outputs {
  _call: KillGaugeCall;

  constructor(call: KillGaugeCall) {
    this._call = call;
  }
}

export class NotifyRewardAmountCall extends ethereum.Call {
  get inputs(): NotifyRewardAmountCall__Inputs {
    return new NotifyRewardAmountCall__Inputs(this);
  }

  get outputs(): NotifyRewardAmountCall__Outputs {
    return new NotifyRewardAmountCall__Outputs(this);
  }
}

export class NotifyRewardAmountCall__Inputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NotifyRewardAmountCall__Outputs {
  _call: NotifyRewardAmountCall;

  constructor(call: NotifyRewardAmountCall) {
    this._call = call;
  }
}

export class PokeCall extends ethereum.Call {
  get inputs(): PokeCall__Inputs {
    return new PokeCall__Inputs(this);
  }

  get outputs(): PokeCall__Outputs {
    return new PokeCall__Outputs(this);
  }
}

export class PokeCall__Inputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PokeCall__Outputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }
}

export class ResetCall extends ethereum.Call {
  get inputs(): ResetCall__Inputs {
    return new ResetCall__Inputs(this);
  }

  get outputs(): ResetCall__Outputs {
    return new ResetCall__Outputs(this);
  }
}

export class ResetCall__Inputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetCall__Outputs {
  _call: ResetCall;

  constructor(call: ResetCall) {
    this._call = call;
  }
}

export class ReviveGaugeCall extends ethereum.Call {
  get inputs(): ReviveGaugeCall__Inputs {
    return new ReviveGaugeCall__Inputs(this);
  }

  get outputs(): ReviveGaugeCall__Outputs {
    return new ReviveGaugeCall__Outputs(this);
  }
}

export class ReviveGaugeCall__Inputs {
  _call: ReviveGaugeCall;

  constructor(call: ReviveGaugeCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReviveGaugeCall__Outputs {
  _call: ReviveGaugeCall;

  constructor(call: ReviveGaugeCall) {
    this._call = call;
  }
}

export class SetClPoolFactoryCall extends ethereum.Call {
  get inputs(): SetClPoolFactoryCall__Inputs {
    return new SetClPoolFactoryCall__Inputs(this);
  }

  get outputs(): SetClPoolFactoryCall__Outputs {
    return new SetClPoolFactoryCall__Outputs(this);
  }
}

export class SetClPoolFactoryCall__Inputs {
  _call: SetClPoolFactoryCall;

  constructor(call: SetClPoolFactoryCall) {
    this._call = call;
  }

  get _clPoolFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetClPoolFactoryCall__Outputs {
  _call: SetClPoolFactoryCall;

  constructor(call: SetClPoolFactoryCall) {
    this._call = call;
  }
}

export class SetCurvePoolFactoryCall extends ethereum.Call {
  get inputs(): SetCurvePoolFactoryCall__Inputs {
    return new SetCurvePoolFactoryCall__Inputs(this);
  }

  get outputs(): SetCurvePoolFactoryCall__Outputs {
    return new SetCurvePoolFactoryCall__Outputs(this);
  }
}

export class SetCurvePoolFactoryCall__Inputs {
  _call: SetCurvePoolFactoryCall;

  constructor(call: SetCurvePoolFactoryCall) {
    this._call = call;
  }

  get _v1Factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCurvePoolFactoryCall__Outputs {
  _call: SetCurvePoolFactoryCall;

  constructor(call: SetCurvePoolFactoryCall) {
    this._call = call;
  }
}

export class SetEmergencyCouncilCall extends ethereum.Call {
  get inputs(): SetEmergencyCouncilCall__Inputs {
    return new SetEmergencyCouncilCall__Inputs(this);
  }

  get outputs(): SetEmergencyCouncilCall__Outputs {
    return new SetEmergencyCouncilCall__Outputs(this);
  }
}

export class SetEmergencyCouncilCall__Inputs {
  _call: SetEmergencyCouncilCall;

  constructor(call: SetEmergencyCouncilCall) {
    this._call = call;
  }

  get _council(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEmergencyCouncilCall__Outputs {
  _call: SetEmergencyCouncilCall;

  constructor(call: SetEmergencyCouncilCall) {
    this._call = call;
  }
}

export class SetEpochGovernorCall extends ethereum.Call {
  get inputs(): SetEpochGovernorCall__Inputs {
    return new SetEpochGovernorCall__Inputs(this);
  }

  get outputs(): SetEpochGovernorCall__Outputs {
    return new SetEpochGovernorCall__Outputs(this);
  }
}

export class SetEpochGovernorCall__Inputs {
  _call: SetEpochGovernorCall;

  constructor(call: SetEpochGovernorCall) {
    this._call = call;
  }

  get _epochGovernor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEpochGovernorCall__Outputs {
  _call: SetEpochGovernorCall;

  constructor(call: SetEpochGovernorCall) {
    this._call = call;
  }
}

export class SetFeeCollectorCall extends ethereum.Call {
  get inputs(): SetFeeCollectorCall__Inputs {
    return new SetFeeCollectorCall__Inputs(this);
  }

  get outputs(): SetFeeCollectorCall__Outputs {
    return new SetFeeCollectorCall__Outputs(this);
  }
}

export class SetFeeCollectorCall__Inputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }

  get _feeCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeCollectorCall__Outputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }
}

export class SetGovernorCall extends ethereum.Call {
  get inputs(): SetGovernorCall__Inputs {
    return new SetGovernorCall__Inputs(this);
  }

  get outputs(): SetGovernorCall__Outputs {
    return new SetGovernorCall__Outputs(this);
  }
}

export class SetGovernorCall__Inputs {
  _call: SetGovernorCall;

  constructor(call: SetGovernorCall) {
    this._call = call;
  }

  get _governor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernorCall__Outputs {
  _call: SetGovernorCall;

  constructor(call: SetGovernorCall) {
    this._call = call;
  }
}

export class SetMaxVotingNumCall extends ethereum.Call {
  get inputs(): SetMaxVotingNumCall__Inputs {
    return new SetMaxVotingNumCall__Inputs(this);
  }

  get outputs(): SetMaxVotingNumCall__Outputs {
    return new SetMaxVotingNumCall__Outputs(this);
  }
}

export class SetMaxVotingNumCall__Inputs {
  _call: SetMaxVotingNumCall;

  constructor(call: SetMaxVotingNumCall) {
    this._call = call;
  }

  get _maxVotingNum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxVotingNumCall__Outputs {
  _call: SetMaxVotingNumCall;

  constructor(call: SetMaxVotingNumCall) {
    this._call = call;
  }
}

export class SetTrustedForwarderCall extends ethereum.Call {
  get inputs(): SetTrustedForwarderCall__Inputs {
    return new SetTrustedForwarderCall__Inputs(this);
  }

  get outputs(): SetTrustedForwarderCall__Outputs {
    return new SetTrustedForwarderCall__Outputs(this);
  }
}

export class SetTrustedForwarderCall__Inputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }

  get forwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedForwarderCall__Outputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class UpdateForCall extends ethereum.Call {
  get inputs(): UpdateForCall__Inputs {
    return new UpdateForCall__Inputs(this);
  }

  get outputs(): UpdateForCall__Outputs {
    return new UpdateForCall__Outputs(this);
  }
}

export class UpdateForCall__Inputs {
  _call: UpdateForCall;

  constructor(call: UpdateForCall) {
    this._call = call;
  }

  get _gauge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateForCall__Outputs {
  _call: UpdateForCall;

  constructor(call: UpdateForCall) {
    this._call = call;
  }
}

export class UpdateFor1Call extends ethereum.Call {
  get inputs(): UpdateFor1Call__Inputs {
    return new UpdateFor1Call__Inputs(this);
  }

  get outputs(): UpdateFor1Call__Outputs {
    return new UpdateFor1Call__Outputs(this);
  }
}

export class UpdateFor1Call__Inputs {
  _call: UpdateFor1Call;

  constructor(call: UpdateFor1Call) {
    this._call = call;
  }

  get start(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get end(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateFor1Call__Outputs {
  _call: UpdateFor1Call;

  constructor(call: UpdateFor1Call) {
    this._call = call;
  }
}

export class UpdateFor2Call extends ethereum.Call {
  get inputs(): UpdateFor2Call__Inputs {
    return new UpdateFor2Call__Inputs(this);
  }

  get outputs(): UpdateFor2Call__Outputs {
    return new UpdateFor2Call__Outputs(this);
  }
}

export class UpdateFor2Call__Inputs {
  _call: UpdateFor2Call;

  constructor(call: UpdateFor2Call) {
    this._call = call;
  }

  get _gauges(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UpdateFor2Call__Outputs {
  _call: UpdateFor2Call;

  constructor(call: UpdateFor2Call) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _poolVote(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _weights(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class WhitelistNFTCall extends ethereum.Call {
  get inputs(): WhitelistNFTCall__Inputs {
    return new WhitelistNFTCall__Inputs(this);
  }

  get outputs(): WhitelistNFTCall__Outputs {
    return new WhitelistNFTCall__Outputs(this);
  }
}

export class WhitelistNFTCall__Inputs {
  _call: WhitelistNFTCall;

  constructor(call: WhitelistNFTCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistNFTCall__Outputs {
  _call: WhitelistNFTCall;

  constructor(call: WhitelistNFTCall) {
    this._call = call;
  }
}

export class WhitelistTokenCall extends ethereum.Call {
  get inputs(): WhitelistTokenCall__Inputs {
    return new WhitelistTokenCall__Inputs(this);
  }

  get outputs(): WhitelistTokenCall__Outputs {
    return new WhitelistTokenCall__Outputs(this);
  }
}

export class WhitelistTokenCall__Inputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistTokenCall__Outputs {
  _call: WhitelistTokenCall;

  constructor(call: WhitelistTokenCall) {
    this._call = call;
  }
}

export class WithdrawManagedCall extends ethereum.Call {
  get inputs(): WithdrawManagedCall__Inputs {
    return new WithdrawManagedCall__Inputs(this);
  }

  get outputs(): WithdrawManagedCall__Outputs {
    return new WithdrawManagedCall__Outputs(this);
  }
}

export class WithdrawManagedCall__Inputs {
  _call: WithdrawManagedCall;

  constructor(call: WithdrawManagedCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawManagedCall__Outputs {
  _call: WithdrawManagedCall;

  constructor(call: WithdrawManagedCall) {
    this._call = call;
  }
}
