type Vote @entity {
  id: ID!
  voter: String!
  tokenId: BigInt
  choice: BigInt
}

type AbstainedEvent @entity {
  id: ID!
  tokenId: BigInt
  weight: BigInt
}

type AttachEvent @entity {
  id: ID!
  owner: Bytes!
  gauge: Bytes!
  tokenId: BigInt
}

type DepositEvent @entity {
  id: ID!
  lp: Bytes!
  gauge: Bytes!
  tokenId: BigInt
  amount: BigInt
}

type DetachEvent @entity {
  id: ID!
  owner: Bytes!
  gauge: Bytes!
  tokenId: BigInt
}

type DistributeRewardEvent @entity {
  id: ID!
  sender: Bytes!
  gauge: Bytes!
  amount: BigInt
}

type GaugeCreatedEvent @entity {
  id: ID!
  gauge: Bytes!
  creator: Bytes!
  internal_bribe: Bytes!
  external_bribe: Bytes!
  pool: Bytes!
}

type GaugeKilledEvent @entity {
  id: ID!
  gauge: Bytes!
}

type GaugeRevivedEvent @entity {
  id: ID!
  gauge: Bytes!
}

type NotifyRewardEvent @entity {
  id: ID!
  sender: Bytes!
  reward: Bytes!
  amount: BigInt
}

type WhitelistedEvent @entity {
  id: ID!
  whitelister: Bytes!
  token: Bytes!
}

type WithdrawEvent @entity {
  id: ID!
  lp: Bytes!
  gauge: Bytes!
  tokenId: BigInt
  amount: BigInt
}



type Pool @entity {
  id: ID!
  token0: String!
  token1: String!
  fee: BigInt!
  tickSpacing: Int!
}

type Fee @entity {
  id: ID!
  feeAmount: BigInt!
  tickSpacing: Int!
}

type Owner @entity {
  id: ID!
  oldOwner: String!
  newOwner: String!
}

type FeeSetter @entity {
  id: ID!
  oldFeeSetter: String!
  newFeeSetter: String!
}

type FeeCollector @entity {
  id: ID!
  oldFeeCollector: String!
  newFeeCollector: String!
}

type Implementation @entity {
  id: ID!
  oldImplementation: String!
  newImplementation: String!
}

type FeeProtocol @entity {
  id: ID!
  oldFeeProtocol0: Int!
  oldFeeProtocol1: Int!
  newFeeProtocol0: Int!
  newFeeProtocol1: Int!
}

type PoolFeeProtocol @entity {
  id: ID!
  pool: String!
  oldFeeProtocol0: Int!
  oldFeeProtocol1: Int!
  newFeeProtocol0: Int!
  newFeeProtocol1: Int!
}


type FeesCollected @entity {
  id: ID!
  collector: String!
  tokenAmount: BigInt!
  feeAmount: BigInt!
  totalCollected: BigInt!
  timestamp: BigInt!
}

type TreasuryChanged @entity {
  id: ID!
  oldTreasury: String!
  newTreasury: String!
  timestamp: BigInt!
}

type TreasuryFeesChanged @entity {
  id: ID!
  oldFeeAmount: BigInt!
  newFeeAmount: BigInt!
  timestamp: BigInt!
}


type Burn @entity {
  id: ID!
  owner: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type Collect @entity {
  id: ID!
  owner: String!
  recipient: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type CollectProtocol @entity {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
}

type Flash @entity {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
  sqrtPriceX96: BigInt!
  liquidity: BigInt!
  tick: BigInt!
}

type IncreaseObservationCardinalityNext @entity {
  id: ID!
  observationCardinalityNextOld: BigInt!
  observationCardinalityNextNew: BigInt!
}

type Initialize @entity {
  id: ID!
  sqrtPriceX96: BigInt!
  tick: BigInt!
}

type Mint @entity {
  id: ID!
  sender: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type SetFeeProtocol @entity {
  id: ID!
  feeProtocol0Old: Int!
  feeProtocol1Old: Int!
  feeProtocol0New: Int!
  feeProtocol1New: Int!
}

type Swap @entity {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
  sqrtPriceX96: BigInt!
  liquidity: BigInt!
  tick: BigInt!
}


type PositionPeriodSecondsInRange @entity {
  id: ID!
  period: BigInt!
  owner: String!
  index: BigInt!
  tickLower: Int!
  tickUpper: Int!
  periodSecondsInsideX96: BigInt!
}


type CollectProtocol @entity {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
}

type FeeAdjustment @entity {
  id: ID!
  oldFee: Int!
  newFee: Int!
}

type SetFeeProtocol @entity {
  id: ID!
  feeProtocol0Old: Int!
  feeProtocol1Old: Int!
  feeProtocol0New: Int!
  feeProtocol1New: Int!
}


type Collect @entity {
  id: ID!
  tokenId: BigInt!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
}

type DecreaseLiquidity @entity {
  id: ID!
  tokenId: BigInt!
  liquidity: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type SwitchAttachment @entity {
  id: ID!
  tokenId: BigInt!
  oldVeVaraTokenId: BigInt!
  newVeVaraTokenId: BigInt!
}


type OwnershipTransferred @entity {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type Approval @entity {
  id: ID!
  owner: String!
  approved: String!
  tokenId: BigInt!
}

type ApprovalForAll @entity {
  id: ID!
  owner: String!
  operator: String!
  approved: Boolean!
}

type Collect @entity {
  id: ID!
  tokenId: BigInt!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
}

type DecreaseLiquidity @entity {
  id: ID!
  tokenId: BigInt!
  liquidity: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type IncreaseLiquidity @entity {
  id: ID!
  tokenId: BigInt!
  liquidity: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type SwitchAttachment @entity {
  id: ID!
  tokenId: BigInt!
  oldVeVaraTokenId: BigInt!
  newVeVaraTokenId: BigInt!
}

type Transfer @entity {
  id: ID!
  from: String!
  to: String!
  tokenId: BigInt!
}


type GaugeCreated @entity {
  id: ID!
  gauge: String!
  pool: String!
}

type ImplementationChanged @entity {
  id: ID!
  oldImplementation: String!
  newImplementation: String!
}

type Initialized @entity {
  id: ID!
  version: Int!
}

type OwnershipTransferred @entity {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

